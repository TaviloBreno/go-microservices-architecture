name: 🚀 CD Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag version to deploy (e.g., v1.0.0)'
        required: true

env:
  REGISTRY: docker.io
  IMAGE_PREFIX: ${{ secrets.DOCKERHUB_USERNAME }}/go-ms

jobs:
  # Build and push Docker images
  build-and-push:
    name: Build & Push - ${{ matrix.service }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: [order, payment, user, notification, catalog, bff-graphql, frontend]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.VERSION }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

  # Create GitHub Release
  create-release:
    name: 📦 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📝 Generate changelog
        id: changelog
        run: |
          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # Generate changelog
          if [ -z "$PREV_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🎉 Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## 🚀 What's New

            ${{ steps.changelog.outputs.CHANGELOG }}

            ## 🐳 Docker Images

            All services are available on Docker Hub:

            ```bash
            # Order Service
            docker pull ${{ env.IMAGE_PREFIX }}-order:${{ github.ref_name }}

            # Payment Service
            docker pull ${{ env.IMAGE_PREFIX }}-payment:${{ github.ref_name }}

            # User Service
            docker pull ${{ env.IMAGE_PREFIX }}-user:${{ github.ref_name }}

            # Notification Service
            docker pull ${{ env.IMAGE_PREFIX }}-notification:${{ github.ref_name }}

            # Catalog Service
            docker pull ${{ env.IMAGE_PREFIX }}-catalog:${{ github.ref_name }}

            # BFF GraphQL
            docker pull ${{ env.IMAGE_PREFIX }}-bff-graphql:${{ github.ref_name }}

            # Frontend
            docker pull ${{ env.IMAGE_PREFIX }}-frontend:${{ github.ref_name }}
            ```

            ## 📊 Monitoring

            - Prometheus: http://localhost:9090
            - Grafana: http://localhost:3000
            - Jaeger: http://localhost:16686

          draft: false
          prerelease: false

  # Notify deployment
  notify:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [build-and-push, create-release]
    if: always()

    steps:
      - name: 📊 Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Services Deployed:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Order Service" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Payment Service" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ User Service" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Notification Service" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Catalog Service" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ BFF GraphQL" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Frontend" >> $GITHUB_STEP_SUMMARY