name: 🧪 CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Job para testar serviços Go
  test-go-services:
    name: Test ${{ matrix.service }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: [order, payment, user, notification, catalog]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: services/${{ matrix.service }}/go.sum

      - name: 📦 Install dependencies
        working-directory: services/${{ matrix.service }}
        run: |
          go mod download
          go mod tidy

      - name: 🧪 Run unit tests
        working-directory: services/${{ matrix.service }}
        run: go test ./... -v -race -coverprofile=coverage.out -covermode=atomic

      - name: 📊 Generate coverage report
        working-directory: services/${{ matrix.service }}
        run: go tool cover -func=coverage.out

      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./services/${{ matrix.service }}/coverage.out
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage

  # Job para testar BFF GraphQL
  test-bff:
    name: Test BFF GraphQL
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: services/bff-graphql/go.sum

      - name: 📦 Install dependencies
        working-directory: services/bff-graphql
        run: |
          go mod download
          go mod tidy

      - name: 🧪 Run unit tests
        working-directory: services/bff-graphql
        run: go test ./... -v -race -coverprofile=coverage.out -covermode=atomic

      - name: 📊 Generate coverage report
        working-directory: services/bff-graphql
        run: go tool cover -func=coverage.out

  # Job para linting Go
  lint-go:
    name: Lint Go Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [order, payment, user, notification, catalog, bff-graphql]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: 🔍 Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: services/${{ matrix.service }}
          args: --timeout=5m

  # Job para testar Frontend React
  test-frontend:
    name: Test Frontend React
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        working-directory: frontend
        run: npm ci

      - name: 🔍 Run ESLint
        working-directory: frontend
        run: npm run lint || true

      - name: 🏗️ Build frontend
        working-directory: frontend
        run: npm run build

  # Job para verificar Docker builds
  docker-build-test:
    name: Docker Build Test - ${{ matrix.service }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: [order, payment, user, notification, bff-graphql, frontend]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          push: false
          tags: test-${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job para verificar docker-compose
  docker-compose-test:
    name: Docker Compose Validation
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ✅ Validate docker-compose.yml
        run: docker-compose config

  # Job de status final
  ci-success:
    name: ✅ CI Pipeline Success
    runs-on: ubuntu-latest
    needs: [test-go-services, test-bff, lint-go, test-frontend, docker-build-test, docker-compose-test]
    if: success()

    steps:
      - name: 🎉 All checks passed
        run: |
          echo "✅ All CI checks passed successfully!"
          echo "📊 Test coverage reports generated"
          echo "🔍 Code linting completed"
          echo "🐳 Docker builds validated"