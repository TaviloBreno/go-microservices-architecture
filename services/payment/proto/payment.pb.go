// Code generated by protoc-gen-go. DO NOT EDIT.
// Manual implementation for payment service

package proto

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PaymentStatusRequest representa uma solicitação para obter status de pagamento
type PaymentStatusRequest struct {
	OrderId uint32 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *PaymentStatusRequest) Reset() {
	*x = PaymentStatusRequest{}
}

func (x *PaymentStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentStatusRequest) ProtoMessage() {}

func (x *PaymentStatusRequest) ProtoReflect() protoreflect.Message {
	return nil
}

func (x *PaymentStatusRequest) GetOrderId() uint32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

// PaymentStatusResponse representa uma resposta de status de pagamento
type PaymentStatusResponse struct {
	OrderId uint32  `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Status  string  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Amount  float64 `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *PaymentStatusResponse) Reset() {
	*x = PaymentStatusResponse{}
}

func (x *PaymentStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentStatusResponse) ProtoMessage() {}

func (x *PaymentStatusResponse) ProtoReflect() protoreflect.Message {
	return nil
}

func (x *PaymentStatusResponse) GetOrderId() uint32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *PaymentStatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PaymentStatusResponse) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// PaymentServiceClient é o cliente do serviço de pagamentos
type PaymentServiceClient interface {
	GetPaymentStatus(ctx context.Context, in *PaymentStatusRequest, opts ...grpc.CallOption) (*PaymentStatusResponse, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) GetPaymentStatus(ctx context.Context, in *PaymentStatusRequest, opts ...grpc.CallOption) (*PaymentStatusResponse, error) {
	out := new(PaymentStatusResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/GetPaymentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer é o servidor do serviço de pagamentos
type PaymentServiceServer interface {
	GetPaymentStatus(context.Context, *PaymentStatusRequest) (*PaymentStatusResponse, error)
}

// UnimplementedPaymentServiceServer deve ser embedded para ter implementações forward compatible
type UnimplementedPaymentServiceServer struct {
}

func (UnimplementedPaymentServiceServer) GetPaymentStatus(context.Context, *PaymentStatusRequest) (*PaymentStatusResponse, error) {
	return nil, nil
}

// RegisterPaymentServiceServer registra o serviço no servidor gRPC
func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_GetPaymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPaymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/GetPaymentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPaymentStatus(ctx, req.(*PaymentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc é o descritor do serviço gRPC
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPaymentStatus",
			Handler:    _PaymentService_GetPaymentStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment.proto",
}
