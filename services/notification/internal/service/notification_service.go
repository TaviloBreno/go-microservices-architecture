package service

import (
	"fmt"
	"log"
	"time"

	"notification-service/internal/domain"
	"notification-service/internal/repository"
)

// NotificationService define os m√©todos de neg√≥cio para notifica√ß√µes
type NotificationService interface {
	ProcessPaymentNotification(paymentID uint, orderID uint, status string, amount float64) error
	GetAllNotifications() ([]*domain.Notification, error)
	GetNotificationsByOrderID(orderID uint) ([]*domain.Notification, error)
	GetNotificationsByPaymentID(paymentID uint) ([]*domain.Notification, error)
}

// NotificationServiceImpl implementa NotificationService
type NotificationServiceImpl struct {
	repo repository.NotificationRepository
}

// NewNotificationService cria uma nova inst√¢ncia do service
func NewNotificationService(repo repository.NotificationRepository) NotificationService {
	return &NotificationServiceImpl{
		repo: repo,
	}
}

// ProcessPaymentNotification processa uma notifica√ß√£o de pagamento
func (s *NotificationServiceImpl) ProcessPaymentNotification(paymentID uint, orderID uint, status string, amount float64) error {
	// Gerar mensagem baseada no status do pagamento
	var message string
	var notificationStatus string

	switch status {
	case "APPROVED":
		message = fmt.Sprintf("üí¨ Notifica√ß√£o: Pagamento aprovado para o pedido %d no valor de R$ %.2f - Enviada com sucesso!", orderID, amount)
		notificationStatus = domain.NotificationStatusSent
		log.Printf("‚úÖ %s", message)
	case "REJECTED":
		message = fmt.Sprintf("‚ùå Notifica√ß√£o: Pagamento rejeitado para o pedido %d no valor de R$ %.2f", orderID, amount)
		notificationStatus = domain.NotificationStatusSent
		log.Printf("‚ùå %s", message)
	default:
		message = fmt.Sprintf("üìù Notifica√ß√£o: Status de pagamento '%s' para o pedido %d no valor de R$ %.2f", status, orderID, amount)
		notificationStatus = domain.NotificationStatusSent
		log.Printf("üìù %s", message)
	}

	// Criar notifica√ß√£o
	notification := &domain.Notification{
		PaymentID: paymentID,
		OrderID:   orderID,
		Message:   message,
		Status:    notificationStatus,
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}

	// Salvar no banco de dados
	err := s.repo.Create(notification)
	if err != nil {
		log.Printf("‚ùå Erro ao salvar notifica√ß√£o no banco: %v", err)
		return fmt.Errorf("falha ao salvar notifica√ß√£o: %w", err)
	}

	log.Printf("‚úÖ Notifica√ß√£o salva no banco de dados - ID: %d", notification.ID)

	// Simular envio da notifica√ß√£o (em um cen√°rio real, aqui seria o envio por email, SMS, etc.)
	s.simulateNotificationSending(notification)

	return nil
}

// GetAllNotifications retorna todas as notifica√ß√µes
func (s *NotificationServiceImpl) GetAllNotifications() ([]*domain.Notification, error) {
	return s.repo.GetAll()
}

// GetNotificationsByOrderID retorna notifica√ß√µes por Order ID
func (s *NotificationServiceImpl) GetNotificationsByOrderID(orderID uint) ([]*domain.Notification, error) {
	return s.repo.GetByOrderID(orderID)
}

// GetNotificationsByPaymentID retorna notifica√ß√µes por Payment ID
func (s *NotificationServiceImpl) GetNotificationsByPaymentID(paymentID uint) ([]*domain.Notification, error) {
	return s.repo.GetByPaymentID(paymentID)
}

// simulateNotificationSending simula o envio da notifica√ß√£o
func (s *NotificationServiceImpl) simulateNotificationSending(notification *domain.Notification) {
	log.Printf("üìß Simulando envio de notifica√ß√£o...")
	log.Printf("üì± Canal: Email/SMS")
	log.Printf("üìã Conte√∫do: %s", notification.Message)
	log.Printf("‚è∞ Enviado em: %s", notification.CreatedAt.Format("2006-01-02 15:04:05"))
	log.Printf("üì® Notifica√ß√£o enviada com sucesso!")
}
